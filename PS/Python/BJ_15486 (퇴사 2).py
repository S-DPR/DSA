import sys
input = sys.stdin.readline
"""
15486번 퇴사 2

DP입니다.
네, DP입니다..

퇴사 1번은 n이 15가 최대라 브루트포스도 가능하고,
이 문제, 퇴사 2는 DP만 가능하도록 n을 150만..까지 늘려놨습니다.

문제의 요지는,
어떤 수열의 원소를 N개 준다고 합니다.
수열의 각 원소는 수 두개, a와 b로 이루어져있습니다.
첫번째 원소부터 아래의 두 동작중 하나를 할 수 있습니다.

1. b만큼 점수를 얻고 인덱스에 a를 더합니다.
만약 현재 인덱스에 a를 더했을 때 최대인덱스를 초과한다면, 이 동작은 할 수 없습니다.
2. 이번 원소를 스킵하고, 인덱스에 1을 더합니다. 얻는 점수는 없습니다.
이렇게해서, 마지막인덱스까지 갔을 때 얻을 수 있는 최대점수를 구하면 됩니다.
"""
n = int(input())
arr = [list(map(int, input().split())) for _ in ' '*n]
dp = [0]*(n+1)
for i in range(n):
    # 이 다음 인덱스에, 현재 최댓값과 그 인덱스에 있는 값중 더 큰값을 넣어줍니다.
    dp[i+1] = max(dp[i+1], dp[i])
    if arr[i][0]+i > n: continue # 이게 true가되면 조건상 해당 상담은 불가능합니다.
    dp[i] += arr[i][1] # 현재 dp에는 점수를 추가해주고..
    dp[i+arr[i][0]] = max(dp[i], dp[i+arr[i][0]]) # 이 다음 상담가능 일자에 더 큰 값을 넣어줍니다.
print(max(dp)) # 이중 최댓값을 출력합니다.
